{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","moment","format","PER_PAGE","RankingList","props","fields","key","value","el","idx","page","textAlign","Item","Group","Image","as","size","src","owner","avatar_url","Content","Header","href","html_url","target","rel","name","Description","login","singleLine","stargazers_count","toLocaleString","description","language","updated_at","fromNow","date","Date","created_at","getFullYear","getMonth","getDate","license","records","list","length","map","Table","Row","col","Cell","celled","selectable","HeaderCell","Body","instance","create","method","baseURL","timeout","headers","Accept","App","useState","setList","loading","setLoading","title","text","reset","status","warning","notice","setNotice","setPage","pages","Array","keys","i","useEffect","interceptors","request","use","config","console","log","error","Promise","reject","shapeReset","resetTime","seconds","diff","count","total","listLoadButtonClick","e","a","get","params","q","sort","per_page","then","results","success","unix","data","items","catch","errorText","response","tmpError","finally","Container","Message","style","marginTop","Icon","Button","widths","onClick","active","Loader","Segment","vertical","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e751002.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Container, Header, Button, Table, Image, Icon, Message, Loader, Segment, Item, Grid } from \"semantic-ui-react\";\r\nimport \"semantic-ui-less/semantic.less\";\r\n\r\nconst axios = require(\"axios\");\r\nconst moment = require(\"moment\");\r\nmoment().format();\r\n\r\nconst PER_PAGE = 100;\r\n\r\nfunction RankingList(props) {\r\n  const fields = [\r\n    { key: \"rank\", value: (el, idx) => (props.page - 1) * PER_PAGE + idx, textAlign: \"center\" },\r\n    {\r\n      key: \"repository / owner\",\r\n      value: el => (\r\n        <Item.Group>\r\n          <Item>\r\n            <Item.Image as=\"img\" size=\"mini\" src={el.owner.avatar_url} />\r\n            <Item.Content>\r\n              <Item.Header as=\"a\" href={el.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {el.name}\r\n              </Item.Header>\r\n              <Item.Description>\r\n                <a href={el.owner.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {el.owner.login}\r\n                </a>\r\n              </Item.Description>\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      ),\r\n      singleLine: true,\r\n    },\r\n    { key: \"stars\", value: el => el.stargazers_count.toLocaleString(), textAlign: \"right\" },\r\n    { key: \"discription\", value: el => el.description },\r\n    { key: \"language\", value: el => el.language, textAlign: \"center\" },\r\n    { key: \"update_at\", value: el => moment(el.updated_at).fromNow(), textAlign: \"right\" },\r\n    {\r\n      key: \"create_at\",\r\n      value: el => {\r\n        const date = new Date(el.created_at);\r\n        return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\r\n      },\r\n      textAlign: \"right\",\r\n    },\r\n    { key: \"licence\", value: el => el.license && el.license.key, textAlign: \"center\" },\r\n  ];\r\n  const records =\r\n    props.list.length &&\r\n    props.list.map((el, idx) => (\r\n      <Table.Row>\r\n        {fields.map(col => (\r\n          <Table.Cell singleLine={col.singleLine ? true : false} textAlign={col.textAlign ? col.textAlign : \"left\"}>\r\n            {col.value(el, idx + 1)}\r\n          </Table.Cell>\r\n        ))}\r\n      </Table.Row>\r\n    ));\r\n\r\n  return (\r\n    <div>\r\n      <Table celled selectable>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            {fields.map(el => (\r\n              <Table.HeaderCell textAlign=\"center\">{el.key}</Table.HeaderCell>\r\n            ))}\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>{records}</Table.Body>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst instance = axios.create({\r\n  method: \"get\",\r\n  baseURL: \"https://api.github.com/\",\r\n  timeout: 4000,\r\n  headers: {\r\n    Accept: \"application/vnd.github.v3+json\",\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const [list, setList] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [notice, setNotice] = useState({\r\n    title: \"Please, choose\",\r\n    text: \"Select the rank you want to see.\",\r\n    reset: {},\r\n    status: { warning: true },\r\n  });\r\n  const [page, setPage] = useState(0);\r\n\r\n  const pages = [...Array(10).keys()].map(i => ({\r\n    page: i + 1,\r\n    text: `${i * PER_PAGE + 1} - ${i * PER_PAGE + PER_PAGE}`,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    instance.interceptors.request.use(\r\n      function(config) {\r\n        setLoading(true);\r\n        setNotice({\r\n          title: \"Loading ...\",\r\n          text: \"\",\r\n          status: { warning: true },\r\n        });\r\n        console.log(\"request\");\r\n\r\n        return config;\r\n      },\r\n      function(error) {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const shapeReset = (resetTime, headers) => ({\r\n    seconds: resetTime.diff(moment(), \"seconds\"),\r\n    count: headers[\"x-ratelimit-remaining\"],\r\n    total: headers[\"x-ratelimit-limit\"],\r\n  });\r\n\r\n  const listLoadButtonClick = async (e, props) => {\r\n    if (loading === false) {\r\n      instance\r\n        .get(\"/search/repositories\", {\r\n          params: {\r\n            q: \"stars:>1000\",\r\n            sort: \"stars\",\r\n            per_page: PER_PAGE,\r\n            page: props.page.page,\r\n          },\r\n        })\r\n        .then(results => {\r\n          console.log(results);\r\n          setNotice({\r\n            title: \"Success\",\r\n            text: `Displayed rank ${props.page.text}.`,\r\n            status: { success: true },\r\n            reset: shapeReset(moment.unix(results.headers[\"x-ratelimit-reset\"]), results.headers),\r\n          });\r\n          setList(results.data.items);\r\n          setPage(props.page.page);\r\n        })\r\n        .catch(error => {\r\n          let errorText = \"error.\";\r\n          if (error.response && error.response.status === 403) {\r\n            errorText = errorText + \"\\n Please try after a while.\";\r\n          }\r\n          const tmpError = error.response || error.request;\r\n          setNotice({\r\n            title: \"Error\",\r\n            text: `${tmpError.status || \"Unknown error\"} ${errorText}`,\r\n            status: { error: true },\r\n            reset: shapeReset(moment.unix(error.response.headers[\"x-ratelimit-reset\"]), error.response.headers),\r\n          });\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n          console.log(\"finally\");\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container textAlign=\"center\">\r\n      <Message style={{ marginTop: \"20px\" }}>\r\n        <Header as=\"h1\" textAlign=\"center\">\r\n          <Icon name=\"star\" />\r\n          Github Top1000 Ranking of number of stars\r\n        </Header>\r\n        * There is a rate limit of 10 times per minute.\r\n      </Message>\r\n      <Button.Group widths=\"10\">\r\n        {pages.map((el, idx) => (\r\n          <Button page={el} onClick={listLoadButtonClick} active={page === idx + 1}>\r\n            {el.text}\r\n          </Button>\r\n        ))}\r\n      </Button.Group>\r\n\r\n      <Message {...notice.status}>\r\n        <Message.Content>\r\n          <Message.Header>{notice.title}</Message.Header>\r\n          {loading ? (\r\n            <Loader active={true} />\r\n          ) : (\r\n            <p>\r\n              <p>{notice.text}</p>\r\n              {notice.reset.seconds && (\r\n                <p>\r\n                  (Limit release time {notice.reset.seconds} seconds ago. ratelimit-remaining {notice.reset.count}/\r\n                  {notice.reset.total})\r\n                </p>\r\n              )}\r\n            </p>\r\n          )}\r\n        </Message.Content>\r\n      </Message>\r\n\r\n      <RankingList list={list} page={page} />\r\n\r\n      <Segment vertical></Segment>\r\n      <Segment vertical>\r\n        <div>\r\n          <a\r\n            href=\"https://github.com/obabachan/javascript-practice/tree/master/02_github-api-from-REST-API\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <Icon name=\"github\" size=\"large\" />\r\n          </a>\r\n        </div>\r\n      </Segment>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}