{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RankingList","props","elements","list","length","map","el","idx","key","src","owner","avatar_url","width","href","html_url","target","name","login","stargazers_count","description","created_at","updated_at","license","url","instance","require","create","method","baseURL","timeout","headers","Accept","App","useState","setList","loading","setLoading","interceptors","request","use","config","error","Promise","reject","response","className","onClick","get","params","q","sort","per_page","then","results","console","log","data","items","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAKA,SAASA,EAAYC,GACnB,IAAMC,EACJD,EAAME,KAAKC,QACXH,EAAME,KAAKE,KAAI,SAACC,EAAIC,GAAL,OACb,wBAAIC,IAAKD,GACP,4BACE,yBAAKE,IAAKH,EAAGI,MAAMC,WAAYC,MAAM,UAEvC,4BACE,uBAAGC,KAAMP,EAAGQ,SAAUC,OAAO,UAC1BT,EAAGU,OAGR,4BACE,uBAAGH,KAAMP,EAAGI,MAAMI,SAAUC,OAAO,UAChCT,EAAGI,MAAMO,QAGd,4BAAKX,EAAGY,kBACR,4BAAKZ,EAAGa,aACR,4BAAKb,EAAGc,YACR,4BAAKd,EAAGe,YACR,4BACGf,EAAGgB,QAAQC,IACV,uBAAGV,KAAMP,EAAGgB,QAAQC,IAAKR,OAAO,UAC7BT,EAAGgB,QAAQN,MAGd,8BAAOV,EAAGgB,QAAQN,OAGtB,iCAGN,OACE,6BACGf,EAAME,KAAKC,QACV,+BACE,+BACE,4BACE,oCACA,0CACA,qCACA,qCACA,2CACA,yCACA,yCACA,yCAGJ,+BAAQF,KAOlB,IAAMsB,EA3DQC,EAAQ,IA2DCC,OAAO,CAC5BC,OAAQ,MACRC,QAAS,0BACTC,QAAS,IACTC,QAAS,CAAEC,OAAQ,oCAsDNC,MAnDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACN9B,EADM,KACA+B,EADA,OAEiBD,mBAAS,SAF1B,mBAENE,EAFM,KAEGC,EAFH,KAwCb,OApCAZ,EAASa,aAAaC,QAAQC,KAC5B,SAASC,GAEP,OADAJ,EAAW,WACJI,KAET,SAASC,GACP,OAAOC,QAAQC,OAAOF,MAI1BjB,EAASa,aAAaO,SAASL,KAC7B,SAASK,GAEP,OADAR,EAAW,UACJQ,KAET,SAASH,GACP,OAAOC,QAAQC,OAAOF,MAqBxB,yBAAKI,UAAU,OACb,uEACCV,EACD,6BACA,4BAAQW,QApBgB,WAC1BtB,EACGuB,IAAI,uBAAwB,CAC3BC,OAAQ,CACNC,EAAG,cACHC,KAAM,QACNC,SAAU,MAGbC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZnB,EAAQmB,EAAQG,KAAKC,YASvB,QACA,kBAACzD,EAAD,CAAaG,KAAMA,MCvGLuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.5a27142c.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst axios = require(\"axios\");\r\n\r\nfunction RankingList(props) {\r\n  const elements =\r\n    props.list.length &&\r\n    props.list.map((el, idx) => (\r\n      <tr key={idx}>\r\n        <td>\r\n          <img src={el.owner.avatar_url} width=\"30px\" />\r\n        </td>\r\n        <td>\r\n          <a href={el.html_url} target=\"_blank\">\r\n            {el.name}\r\n          </a>\r\n        </td>\r\n        <td>\r\n          <a href={el.owner.html_url} target=\"_blank\">\r\n            {el.owner.login}\r\n          </a>\r\n        </td>\r\n        <td>{el.stargazers_count}</td>\r\n        <td>{el.description}</td>\r\n        <td>{el.created_at}</td>\r\n        <td>{el.updated_at}</td>\r\n        <td>\r\n          {el.license.url ? (\r\n            <a href={el.license.url} target=\"_blank\">\r\n              {el.license.name}\r\n            </a>\r\n          ) : (\r\n            <span>{el.license.name}</span>\r\n          )}\r\n        </td>\r\n        <td></td>\r\n      </tr>\r\n    ));\r\n  return (\r\n    <div>\r\n      {props.list.length && (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td>icon</td>\r\n              <td>repository</td>\r\n              <td>owner</td>\r\n              <td>stars</td>\r\n              <td>discription</td>\r\n              <td>create_at</td>\r\n              <td>update_at</td>\r\n              <td>licence</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{elements}</tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst instance = axios.create({\r\n  method: \"get\",\r\n  baseURL: \"https://api.github.com/\",\r\n  timeout: 4000,\r\n  headers: { Accept: \"application/vnd.github.v3+json\" },\r\n});\r\n\r\nfunction App() {\r\n  const [list, setList] = useState({});\r\n  const [loading, setLoading] = useState(\"empty\");\r\n\r\n  instance.interceptors.request.use(\r\n    function(config) {\r\n      setLoading(\"loading\");\r\n      return config;\r\n    },\r\n    function(error) {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  instance.interceptors.response.use(\r\n    function(response) {\r\n      setLoading(\"finish\");\r\n      return response;\r\n    },\r\n    function(error) {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  const listRoadButtonClick2 = () => {};\r\n\r\n  const listRoadButtonClick = () => {\r\n    instance\r\n      .get(\"/search/repositories\", {\r\n        params: {\r\n          q: \"stars:>1000\",\r\n          sort: \"stars\",\r\n          per_page: 10,\r\n        },\r\n      })\r\n      .then(results => {\r\n        console.log(results);\r\n        setList(results.data.items);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Github Top10 Ranking of number of stars</h1>\r\n      {loading}\r\n      <br />\r\n      <button onClick={listRoadButtonClick}>road</button>\r\n      <RankingList list={list} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}