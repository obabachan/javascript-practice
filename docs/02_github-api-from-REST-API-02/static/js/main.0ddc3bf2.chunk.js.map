{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","moment","RankingList","props","fields","key","value","el","Header","as","image","Image","src","owner","avatar_url","size","Content","href","html_url","target","rel","name","Subheader","login","stargazers_count","toLocaleString","description","language","updated_at","fromNow","date","Date","created_at","getFullYear","getMonth","getDay","license","records","list","length","map","idx","Table","Row","col","Cell","singleLine","celled","selectable","HeaderCell","Body","format","instance","create","method","baseURL","timeout","headers","Accept","App","useState","setList","loading","setLoading","interceptors","request","use","config","error","Promise","reject","response","className","Container","textAlign","Icon","Button","onClick","get","params","q","sort","per_page","then","results","console","log","data","items","positive","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ddc3bf2.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport { Container, Header, Button, Table, Image, icon, Icon } from \"semantic-ui-react\";\r\nimport \"semantic-ui-less/semantic.less\";\r\n\r\nconst axios = require(\"axios\");\r\nconst moment = require(\"moment\");\r\nmoment().format();\r\n\r\nfunction RankingList(props) {\r\n  const fields = [\r\n    {\r\n      key: \"repository / owner\",\r\n      value: el => (\r\n        <Header as=\"h4\" image>\r\n          <Image src={el.owner.avatar_url} size=\"mini\" />\r\n          <Header.Content>\r\n            <a href={el.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {el.name}\r\n            </a>{\" \"}\r\n            <Header.Subheader>\r\n              <a href={el.owner.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {el.owner.login}\r\n              </a>\r\n            </Header.Subheader>\r\n          </Header.Content>\r\n        </Header>\r\n      ),\r\n    },\r\n    // {\r\n    //   key: \"repository\",\r\n    //   value: el => (\r\n    //     <a href={el.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n    //       {el.name}\r\n    //     </a>\r\n    //   ),\r\n    // },\r\n    // {\r\n    //   key: \"owner\",\r\n    //   value: el => (\r\n    //     <a href={el.owner.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n    //       {el.owner.login}\r\n    //     </a>\r\n    //   ),\r\n    // },\r\n    { key: \"stars\", value: el => el.stargazers_count.toLocaleString() },\r\n    { key: \"discription\", value: el => el.description },\r\n    { key: \"language\", value: el => el.language },\r\n    { key: \"update_at\", value: el => moment(el.updated_at).fromNow() },\r\n    {\r\n      key: \"create_at\",\r\n      value: el => {\r\n        const date = new Date(el.created_at);\r\n        return `${date.getFullYear()}/${date.getMonth()}/${date.getDay()}`;\r\n      },\r\n    },\r\n    { key: \"licence\", value: el => el.license.key },\r\n  ];\r\n  const records =\r\n    props.list.length &&\r\n    props.list.map((el, idx) => (\r\n      <Table.Row>\r\n        {fields.map((col, idx) => (\r\n          <Table.Cell singleLine={idx === 0}>{col.value(el)}</Table.Cell>\r\n        ))}\r\n      </Table.Row>\r\n    ));\r\n\r\n  return (\r\n    <div>\r\n      <Table celled selectable>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            {fields.map(el => (\r\n              <Table.HeaderCell>{el.key}</Table.HeaderCell>\r\n            ))}\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>{records}</Table.Body>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst instance = axios.create({\r\n  method: \"get\",\r\n  baseURL: \"https://api.github.com/\",\r\n  timeout: 4000,\r\n  headers: {\r\n    Accept: \"application/vnd.github.v3+json\",\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const [list, setList] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  instance.interceptors.request.use(\r\n    function(config) {\r\n      setLoading(true);\r\n      return config;\r\n    },\r\n    function(error) {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  instance.interceptors.response.use(\r\n    function(response) {\r\n      setLoading(false);\r\n      return response;\r\n    },\r\n    function(error) {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  const listRoadButtonClick = () => {\r\n    if (loading === false) {\r\n      instance\r\n        .get(\"/search/repositories\", {\r\n          params: {\r\n            q: \"stars:>1000\",\r\n            sort: \"stars\",\r\n            per_page: 10,\r\n          },\r\n        })\r\n        .then(results => {\r\n          console.log(results);\r\n          setList(results.data.items);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container textAlign=\"center\">\r\n        <Header as=\"h1\" textAlign=\"center\">\r\n          <Icon name=\"star\" />\r\n          Github Top10 Ranking of number of stars\r\n        </Header>\r\n        {loading}\r\n        <br />\r\n        <Button onClick={listRoadButtonClick} positive={true} loading={loading}>\r\n          road\r\n        </Button>\r\n        <br />\r\n        <br />\r\n        <RankingList list={list} />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}